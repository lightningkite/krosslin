//Generated by Lightning Kite's Mirror plugin
//AUTOMATICALLY GENERATED AND WILL BE OVERRIDDEN IF THIS MESSAGE IS PRESENT
package com.lightningkite.koolui.test.models

import com.lightningkite.lokalize.time.TimeStamp
import com.lightningkite.lokalize.time.now
import com.lightningkite.mirror.archive.model.Id
import com.lightningkite.mirror.form.DefaultSort
import com.lightningkite.mirror.form.Hidden
import com.lightningkite.mirror.form.Importance
import com.lightningkite.mirror.info.*
import kotlin.reflect.KClass

@Suppress("RemoveExplicitTypeArguments", "UNCHECKED_CAST", "USELESS_CAST")
object PostClassInfo: ClassInfo<Post> {

    override val kClass: KClass<Post> = Post::class
    override val modifiers: List<ClassInfo.Modifier> = listOf(ClassInfo.Modifier.Data)
    override val companion: Any? get() = null

    override val implements: List<Type<*>> = listOf()

    override val packageName: String = "com.lightningkite.koolui.test.models"
    override val owner: KClass<*>? = null
    override val ownerName: String? = null

    override val name: String = "Post"
    override val annotations: List<AnnotationInfo> = listOf()
    override val enumValues: List<Post>? = null

    val fieldId = FieldInfo<Post, Id>(this, "id", Type<Id>(Id::class, listOf(), false), false, { it.id as Id }, listOf(AnnotationInfo("@Hidden", listOf())))
    val fieldTitle = FieldInfo<Post, String>(this, "title", Type<String>(String::class, listOf(), false), false, { it.title as String}, listOf(AnnotationInfo("@Importance", listOf(.8f))))
    val fieldBody = FieldInfo<Post, String>(this, "body", Type<String>(String::class, listOf(), false), false, { it.body as String}, listOf(AnnotationInfo("@Importance", listOf(.6f))))
    val fieldTimeStamp = FieldInfo<Post, TimeStamp>(this, "timeStamp", Type<TimeStamp>(TimeStamp::class, listOf(), false), false, { it.timeStamp as TimeStamp}, listOf(AnnotationInfo("@DefaultSort", listOf())))
    val fieldFormat = FieldInfo<Post, String>(this, "format", Type<String>(String::class, listOf(), false), false, { it.format as String}, listOf(AnnotationInfo("@Importance", listOf(.2f))))

    override val fields: List<FieldInfo<Post, *>> = listOf(fieldId, fieldTitle, fieldBody, fieldTimeStamp, fieldFormat)

    override fun construct(map: Map<String, Any?>): Post {
        //Gather variables
        val id: Id = map["id"] as Id
        val title:String = map["title"] as String
        val body:String = map["body"] as String
        val timeStamp:TimeStamp = map["timeStamp"] as TimeStamp
        val format:String = map["format"] as String
        //Handle the optionals

        //Finally do the call
        return Post(
                id = id,
            title = title,
            body = body,
            timeStamp = timeStamp,
            format = format
        )
    }

}
