//Generated by Lightning Kite's Mirror plugin
//AUTOMATICALLY GENERATED AND WILL BE OVERRIDDEN IF THIS MESSAGE IS PRESENT
package com.lightningkite.krosslin.test.models

import com.lightningkite.kommon.string.Email
import com.lightningkite.lokalize.time.TimeStamp
import com.lightningkite.mirror.archive.database.Database
import com.lightningkite.mirror.archive.model.HasUuid
import com.lightningkite.mirror.archive.model.Uuid
import com.lightningkite.mirror.form.info.FormEditOnly
import com.lightningkite.mirror.form.info.FormHidden
import com.lightningkite.mirror.form.info.FormNeedsNoContext
import com.lightningkite.mirror.info.ThrowsTypes
import com.lightningkite.mirror.request.Request
import com.lightningkite.mirror.info.*
import kotlin.reflect.KClass
import kotlinx.serialization.*
import mirror.kotlin.*

object UserTokenMirror : MirrorClass<User.Token>() {
    override val empty: User.Token get() = User.Token(
        string = StringMirror.empty
    )
    @Suppress("UNCHECKED_CAST")
    override val kClass: KClass<User.Token> get() = User.Token::class as KClass<User.Token>
    override val modifiers: Array<Modifier> get() = arrayOf(Modifier.Data)
    override val packageName: String get() = "com.lightningkite.krosslin.test.models"
    override val localName: String get() = "User.Token"
    override val implements: Array<MirrorClass<*>> get() = arrayOf()
    override val owningClass: KClass<*>? get() = User::class
    
    val fieldString: Field<User.Token,String> = Field(
        owner = this,
        index = 0,
        name = "string",
        type = StringMirror,
        optional = false,
        get = { it.string },
        annotations = listOf<Annotation>()
    )
    
    override val fields: Array<Field<User.Token, *>> = arrayOf(fieldString)
    
    override fun deserialize(decoder: Decoder): User.Token {
        var stringSet = false
        var fieldString: String? = null
        val decoderStructure = decoder.beginStructure(this)
        loop@ while (true) {
            when (decoderStructure.decodeElementIndex(this)) {
                CompositeDecoder.READ_ALL -> {
                    fieldString = decoderStructure.decodeStringElement(this, 0)
                    stringSet = true
                    break@loop
                }
                CompositeDecoder.READ_DONE -> break@loop
                0 -> {
                    fieldString = decoderStructure.decodeStringElement(this, 0)
                    stringSet = true
                }
                else -> {}
            }
        }
        decoderStructure.endStructure(this)
        if(!stringSet) {
            throw MissingFieldException("string")
        }
        return User.Token(
            string = fieldString as String
        )
    }
    
    override fun serialize(encoder: Encoder, obj: User.Token) {
        val encoderStructure = encoder.beginStructure(this)
        encoderStructure.encodeStringElement(this, 0, obj.string)
        encoderStructure.endStructure(this)
    }
}
