//Generated by Lightning Kite's Mirror plugin
//AUTOMATICALLY GENERATED AND WILL BE OVERRIDDEN IF THIS MESSAGE IS PRESENT
package com.lightningkite.krosslin.test.models

import com.lightningkite.lokalize.time.TimeStamp
import com.lightningkite.lokalize.time.now
import com.lightningkite.mirror.archive.database.Database
import com.lightningkite.mirror.archive.model.HasUuid
import com.lightningkite.mirror.archive.model.Reference
import com.lightningkite.mirror.archive.model.Uuid
import com.lightningkite.mirror.form.info.FormHidden
import com.lightningkite.mirror.form.info.FormNeedsNoContext
import com.lightningkite.mirror.info.*
import kotlin.reflect.KClass
import kotlinx.serialization.*
import mirror.kotlin.*
import com.lightningkite.mirror.form.info.FormNeedsNoContextMirror
import com.lightningkite.mirror.archive.model.UuidMirror
import com.lightningkite.mirror.archive.model.HasUuidMirror
import com.lightningkite.mirror.archive.model.ReferenceMirror
import com.lightningkite.lokalize.time.TimeStampMirror
import com.lightningkite.mirror.form.info.FormHiddenMirror

object PostMirror : MirrorClass<Post>() {
    override val empty: Post get() = Post(
        id = Uuid.randomUUID4(),
        title = "",
        author = ReferenceMirror(UserMirror).empty,
        posted = TimeStamp.now(),
        body = ""
    )
    @Suppress("UNCHECKED_CAST")
    override val kClass: KClass<Post> get() = Post::class as KClass<Post>
    override val modifiers: Array<Modifier> get() = arrayOf(Modifier.Data)
    override val packageName: String get() = "com.lightningkite.krosslin.test.models"
    override val localName: String get() = "Post"
    override val implements: Array<MirrorClass<*>> get() = arrayOf(HasUuidMirror)
    
    val fieldId: Field<Post,Uuid> = Field(
        owner = this,
        index = 0,
        name = "id",
        type = UuidMirror,
        optional = true,
        get = { it.id },
        annotations = listOf<Annotation>(FormHiddenMirror())
    )
    
    val fieldTitle: Field<Post,String> = Field(
        owner = this,
        index = 1,
        name = "title",
        type = StringMirror,
        optional = true,
        get = { it.title },
        set = { it, value -> it.title = value },
        annotations = listOf<Annotation>(FormNeedsNoContextMirror())
    )
    
    val fieldAuthor: Field<Post,Reference<User>> = Field(
        owner = this,
        index = 2,
        name = "author",
        type = ReferenceMirror(UserMirror),
        optional = false,
        get = { it.author },
        set = { it, value -> it.author = value },
        annotations = listOf<Annotation>()
    )
    
    val fieldPosted: Field<Post,TimeStamp> = Field(
        owner = this,
        index = 3,
        name = "posted",
        type = TimeStampMirror,
        optional = true,
        get = { it.posted },
        set = { it, value -> it.posted = value },
        annotations = listOf<Annotation>()
    )
    
    val fieldBody: Field<Post,String> = Field(
        owner = this,
        index = 4,
        name = "body",
        type = StringMirror,
        optional = true,
        get = { it.body },
        set = { it, value -> it.body = value },
        annotations = listOf<Annotation>()
    )
    
    override val fields: Array<Field<Post, *>> = arrayOf(fieldId, fieldTitle, fieldAuthor, fieldPosted, fieldBody)
    
    override fun deserialize(decoder: Decoder): Post {
        var idSet = false
        var fieldId: Uuid? = null
        var titleSet = false
        var fieldTitle: String? = null
        var authorSet = false
        var fieldAuthor: Reference<User>? = null
        var postedSet = false
        var fieldPosted: TimeStamp? = null
        var bodySet = false
        var fieldBody: String? = null
        val decoderStructure = decoder.beginStructure(this)
        loop@ while (true) {
            when (decoderStructure.decodeElementIndex(this)) {
                CompositeDecoder.READ_ALL -> {
                    fieldId = decoderStructure.decodeSerializableElement(this, 0, UuidMirror)
                    idSet = true
                    fieldTitle = decoderStructure.decodeStringElement(this, 1)
                    titleSet = true
                    fieldAuthor = decoderStructure.decodeSerializableElement(this, 2, ReferenceMirror(UserMirror))
                    authorSet = true
                    fieldPosted = decoderStructure.decodeSerializableElement(this, 3, TimeStampMirror)
                    postedSet = true
                    fieldBody = decoderStructure.decodeStringElement(this, 4)
                    bodySet = true
                    break@loop
                }
                CompositeDecoder.READ_DONE -> break@loop
                0 -> {
                    fieldId = decoderStructure.decodeSerializableElement(this, 0, UuidMirror)
                    idSet = true
                }
                1 -> {
                    fieldTitle = decoderStructure.decodeStringElement(this, 1)
                    titleSet = true
                }
                2 -> {
                    fieldAuthor = decoderStructure.decodeSerializableElement(this, 2, ReferenceMirror(UserMirror))
                    authorSet = true
                }
                3 -> {
                    fieldPosted = decoderStructure.decodeSerializableElement(this, 3, TimeStampMirror)
                    postedSet = true
                }
                4 -> {
                    fieldBody = decoderStructure.decodeStringElement(this, 4)
                    bodySet = true
                }
                else -> {}
            }
        }
        decoderStructure.endStructure(this)
        if(!idSet) {
            fieldId = Uuid.randomUUID4()
        }
        if(!titleSet) {
            fieldTitle = ""
        }
        if(!authorSet) {
            throw MissingFieldException("author")
        }
        if(!postedSet) {
            fieldPosted = TimeStamp.now()
        }
        if(!bodySet) {
            fieldBody = ""
        }
        return Post(
            id = fieldId as Uuid,
            title = fieldTitle as String,
            author = fieldAuthor as Reference<User>,
            posted = fieldPosted as TimeStamp,
            body = fieldBody as String
        )
    }
    
    override fun serialize(encoder: Encoder, obj: Post) {
        val encoderStructure = encoder.beginStructure(this)
        encoderStructure.encodeSerializableElement(this, 0, UuidMirror, obj.id)
        encoderStructure.encodeStringElement(this, 1, obj.title)
        encoderStructure.encodeSerializableElement(this, 2, ReferenceMirror(UserMirror), obj.author)
        encoderStructure.encodeSerializableElement(this, 3, TimeStampMirror, obj.posted)
        encoderStructure.encodeStringElement(this, 4, obj.body)
        encoderStructure.endStructure(this)
    }
}
