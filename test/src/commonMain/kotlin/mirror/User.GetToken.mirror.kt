//Generated by Lightning Kite's Mirror plugin
//AUTOMATICALLY GENERATED AND WILL BE OVERRIDDEN IF THIS MESSAGE IS PRESENT
package com.lightningkite.krosslin.test.models

import com.lightningkite.kommon.string.Email
import com.lightningkite.lokalize.time.TimeStamp
import com.lightningkite.mirror.archive.database.Database
import com.lightningkite.mirror.archive.model.HasUuid
import com.lightningkite.mirror.archive.model.Uuid
import com.lightningkite.mirror.form.info.FormEditOnly
import com.lightningkite.mirror.form.info.FormHidden
import com.lightningkite.mirror.form.info.FormNeedsNoContext
import com.lightningkite.mirror.info.ThrowsTypes
import com.lightningkite.mirror.request.Request
import com.lightningkite.mirror.info.*
import kotlin.reflect.KClass
import kotlinx.serialization.*
import mirror.kotlin.*
import com.lightningkite.kommon.string.EmailMirror
import com.lightningkite.mirror.request.RequestMirror
import com.lightningkite.mirror.info.ThrowsTypesMirror

object UserGetTokenMirror : MirrorClass<User.GetToken>() {
    override val empty: User.GetToken get() = User.GetToken(
        email = EmailMirror.empty,
        password = StringMirror.empty
    )
    @Suppress("UNCHECKED_CAST")
    override val kClass: KClass<User.GetToken> get() = User.GetToken::class as KClass<User.GetToken>
    override val modifiers: Array<Modifier> get() = arrayOf(Modifier.Data)
    override val packageName: String get() = "com.lightningkite.krosslin.test.models"
    override val localName: String get() = "User.GetToken"
    override val implements: Array<MirrorClass<*>> get() = arrayOf(RequestMirror(UserTokenMirror))
    override val owningClass: KClass<*>? get() = User::class
    override val annotations: List<Annotation> = listOf(ThrowsTypesMirror(arrayOf("NoSuchElementException","ForbiddenException")))
    
    val fieldEmail: Field<User.GetToken,Email> = Field(
        owner = this,
        index = 0,
        name = "email",
        type = EmailMirror,
        optional = false,
        get = { it.email },
        annotations = listOf<Annotation>()
    )
    
    val fieldPassword: Field<User.GetToken,String> = Field(
        owner = this,
        index = 1,
        name = "password",
        type = StringMirror,
        optional = false,
        get = { it.password },
        annotations = listOf<Annotation>()
    )
    
    override val fields: Array<Field<User.GetToken, *>> = arrayOf(fieldEmail, fieldPassword)
    
    override fun deserialize(decoder: Decoder): User.GetToken {
        var emailSet = false
        var fieldEmail: Email? = null
        var passwordSet = false
        var fieldPassword: String? = null
        val decoderStructure = decoder.beginStructure(this)
        loop@ while (true) {
            when (decoderStructure.decodeElementIndex(this)) {
                CompositeDecoder.READ_ALL -> {
                    fieldEmail = decoderStructure.decodeSerializableElement(this, 0, EmailMirror)
                    emailSet = true
                    fieldPassword = decoderStructure.decodeStringElement(this, 1)
                    passwordSet = true
                    break@loop
                }
                CompositeDecoder.READ_DONE -> break@loop
                0 -> {
                    fieldEmail = decoderStructure.decodeSerializableElement(this, 0, EmailMirror)
                    emailSet = true
                }
                1 -> {
                    fieldPassword = decoderStructure.decodeStringElement(this, 1)
                    passwordSet = true
                }
                else -> {}
            }
        }
        decoderStructure.endStructure(this)
        if(!emailSet) {
            throw MissingFieldException("email")
        }
        if(!passwordSet) {
            throw MissingFieldException("password")
        }
        return User.GetToken(
            email = fieldEmail as Email,
            password = fieldPassword as String
        )
    }
    
    override fun serialize(encoder: Encoder, obj: User.GetToken) {
        val encoderStructure = encoder.beginStructure(this)
        encoderStructure.encodeSerializableElement(this, 0, EmailMirror, obj.email)
        encoderStructure.encodeStringElement(this, 1, obj.password)
        encoderStructure.endStructure(this)
    }
}
