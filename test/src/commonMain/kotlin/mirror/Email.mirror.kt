//Generated by Lightning Kite's Mirror plugin
//AUTOMATICALLY GENERATED AND WILL BE OVERRIDDEN IF THIS MESSAGE IS PRESENT
package com.lightningkite.kommon.string

import com.lightningkite.mirror.info.*
import kotlin.reflect.KClass
import kotlinx.serialization.*
import mirror.kotlin.*
import com.lightningkite.kommon.string.BackedByStringMirror

object EmailMirror : MirrorClass<Email>() {
    override val empty: Email get() = Email(
        string = StringMirror.empty
    )
    @Suppress("UNCHECKED_CAST")
    override val kClass: KClass<Email> get() = Email::class as KClass<Email>
    override val modifiers: Array<Modifier> get() = arrayOf(Modifier.Inline)
    override val packageName: String get() = "com.lightningkite.kommon.string"
    override val localName: String get() = "Email"
    override val implements: Array<MirrorClass<*>> get() = arrayOf(com.lightningkite.kommon.string.BackedByStringMirror)
    
    val fieldString: Field<Email,kotlin.String> = Field(
        owner = this,
        index = 0,
        name = "string",
        type = StringMirror,
        optional = false,
        get = { it.string },
        annotations = listOf<Annotation>()
    )
    
    override val fields: Array<Field<Email, *>> = arrayOf(fieldString)
    
    override fun deserialize(decoder: Decoder): Email {
        var stringSet = false
        var fieldString: kotlin.String? = null
        val decoderStructure = decoder.beginStructure(this)
        loop@ while (true) {
            when (decoderStructure.decodeElementIndex(this)) {
                CompositeDecoder.READ_ALL -> {
                    fieldString = decoderStructure.decodeStringElement(this, 0)
                    stringSet = true
                    break@loop
                }
                CompositeDecoder.READ_DONE -> break@loop
                0 -> {
                    fieldString = decoderStructure.decodeStringElement(this, 0)
                    stringSet = true
                }
                else -> {}
            }
        }
        decoderStructure.endStructure(this)
        if(!stringSet) {
            throw MissingFieldException("string")
        }
        return Email(
            string = fieldString as kotlin.String
        )
    }
    
    override fun serialize(encoder: Encoder, obj: Email) {
        val encoderStructure = encoder.beginStructure(this)
        encoderStructure.encodeStringElement(this, 0, obj.string)
        encoderStructure.endStructure(this)
    }
}
